webpackJsonp([28],{779:function(r,n){r.exports="### String Methods\r\n\r\n#### Methods List\r\n1. ##### **`String.fromCodePoint()`**\r\n2. ##### **`String.prototype.codePointAt()`**\r\n3. ##### **`String.prototype.startsWith(),`**\r\n4. ##### **`String.prototype.endsWith()`**\r\n5. ##### **`String.prototype.includes()`**\r\n6. ##### **`String.prototype.repeat()`**\r\n7. ##### **`String.prototype.normalize()`**\r\n8. ##### **`String.raw()`**\r\n\r\n##### **`String.fromCodePoint()`**\r\n\r\n###### Description\r\nReturns string from the provided unicode code points.\r\n\r\n###### Syntax\r\n```javascript\r\n/**\r\n * Returns string from the provided unicode code points.\r\n *\r\n * @param  {Number} num Reference to unicode point representing a string.\r\n * \r\n * @return {String}\r\n *\r\n * @exceptions\r\n *    + RangeError\r\n *        01. If non valid unicode code point is passed.\r\n */\r\nString.fromCodePoint(num1, ..., numN)\r\n```\r\n\r\n###### Examples\r\n```javascript\r\nString.fromCodePoint(65);   // => \"A\"\r\nString.fromCodePoint('_');  // => RangeError\r\n```\r\n\r\n\r\n\r\n##### **`String.prototype.codePointAt()`**\r\n\r\n###### Description\r\nReturns a non-negative integer represents Unicode code point for a string value in the specified position.\r\n\r\n###### Syntax\r\n```javascript\r\n/**\r\n * Returns a non-negative integer represents Unicode code point\r\n * for a string value in the specified position.\r\n *\r\n * @param  {Number} position Index of the input value to get its code point.\r\n *\r\n * @return {Number|undefined}\r\n *    `Number` represents Unicode code point if found `undefined` otherwise.\r\n */\r\nString.prototype.codePointAt(position)\r\n```\r\n\r\n###### Examples\r\n```javascript\r\n'AB'.codePointAt(1) // => 65\r\n'AB'.codePointAt(3) // => undefined\r\n```\r\n\r\n\r\n\r\n##### **`String.prototype.startsWith()`**\r\n\r\n###### Description\r\nDetermines if a string starts with the specified characters or not.\r\n\r\n###### Syntax\r\n```javascript\r\n/**\r\n * Determines if a string starts with the specified characters or not.\r\n *\r\n * @param  {String} string      Characters to match.\r\n * @param  {Number} [position]  Index to start matching from.\r\n *\r\n * @return {Boolean}\r\n *    true if there's a match, false otherwise.\r\n */\r\nString.prototype.startsWith(string, position)\r\n```\r\n\r\n###### Examples\r\n```javascript\r\n'ABC'.startsWith('A')    // => true\r\n'ABC'.startsWith('B')    // => false\r\n'BAC'.startsWith('A', 1) // => true\r\n```\r\n\r\n\r\n\r\n##### **`String.prototype.endsWith()`**\r\n\r\n###### Description\r\nDetermines if a string ends with the specified characters or not.\r\n\r\n###### Syntax\r\n```javascript\r\n/**\r\n * Determines if a string ends with the specified characters or not.\r\n *\r\n * @param  {String} string   Characters to match.\r\n * @param  {Number} [length] Range to search in.\r\n *\r\n * @return {Boolean}\r\n *    true if there's a match, false otherwise.\r\n */\r\nString.prototype.endsWith(string, length)\r\n```\r\n\r\n###### Examples\r\n```javascript\r\n'ABC'.endsWith('C')    // => true\r\n'ABC'.endsWith('B')    // => false\r\n'BAC'.endsWith('A', 2) // => true\r\n```\r\n\r\n\r\n\r\n##### **`String.prototype.includes()`**\r\n\r\n###### Description\r\nDetermines if a string is found in other string.\r\n\r\n###### Syntax\r\n```javascript\r\n/**\r\n * Determines if a string is found in other string.\r\n *\r\n * @param  {String} string     Characters to match.\r\n * @param  {Number} [position] Index to start searching from.\r\n *\r\n * @return {Boolean}\r\n *    true if there's a match, false otherwise.\r\n */\r\nString.prototype.includes(string, position)\r\n```\r\n\r\n###### Examples\r\n```javascript\r\n'ABC'.includes('C')    // => true\r\n'ABC'.includes('D')    // => false\r\n'BAC'.includes('A', 1) // => true\r\n```\r\n\r\n\r\n\r\n##### **`String.prototype.repeat()`**\r\n\r\n###### Description\r\nRepeats the string called on for the specified number of times.\r\n\r\n###### Syntax\r\n```javascript\r\n/**\r\n * Repeats the string called on for the specified number of times.g.\r\n *\r\n * @param  {Number} count Number of times to repeat\r\n *\r\n * @return {String}\r\n *    the new string containing the repeats.\r\n *\r\n * @exceptions\r\n *    + RangeError\r\n *        01. Negative count number\r\n *        02. Infinity\r\n *        03. Maximum string size\r\n */\r\nString.prototype.repeat(count)\r\n```\r\n\r\n###### Examples\r\n```javascript\r\n'ABC'.repeat(1)  // => 'ABCABC'\r\n'ABC'.repeat(-1) // => RangeError\r\n```\r\n\r\n\r\n\r\n##### **`String.prototype.normalize()`**\r\n\r\n###### Description\r\nMethod returns the Unicode Normalization Form of a given string.\r\n\r\n###### Syntax\r\n```javascript\r\n/**\r\n * Method returns the Unicode Normalization Form of a given string.\r\n *\r\n * @param  {String} [form = 'NFC']  Unicode Normalization Form.\r\n *\r\n * @return {String}\r\n *    Unicode Normalization Form of the given string.\r\n *\r\n * @exceptions\r\n *    + RangeError\r\n *        01. Provided form isn't supported\r\n */\r\nString.prototype.normalize(form)\r\n```\r\n\r\n###### Examples\r\n```javascript\r\nconst str = '\\u1E9B\\u0323';\r\nstr.normalize();      // '\\u1E9B\\u0323'\r\n```\r\n\r\n\r\n\r\n##### **`String.raw()`**\r\n\r\n###### Description\r\nMethod returns the non-parsed string of template literals.\r\n\r\n###### Syntax\r\n```javascript\r\n/**\r\n * Method returns the non-parsed string of template literals.\r\n *\r\n * @param  {Object} callSite  Object containing `raw` property.\r\n * @param  {Array}  subs      Placeholders values.\r\n *\r\n * @return {String}\r\n *    non-parsed string.\r\n *\r\n * @exceptions\r\n *    + TypeError\r\n *        01. callSite isn't `object` containing `raw` property.\r\n */\r\n String.raw(callSite, ...subs)\r\n String.raw`template literals`\r\n```\r\n\r\n###### Examples\r\n```javascript\r\nString.raw({ raw: 'hello\\n${x}' }, 'world'); // => \"hello\\\\nworld\"\r\nString.raw`'hello\\nworld`; // => \"hello\\\\nworld\"\r\n```\r\n"}});