webpackJsonp([9,33],{104:function(e,r,n){"use strict";(function(e){function t(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;var s=t(n(2)),a=t(n(221)),o=t(n(57)),i=t(n(774));!function(){var r=n(1).enterModule;r&&r(e)}();var c=function(){return s.default.createElement(o.default,null,s.default.createElement("div",{id:"post"},s.default.createElement("hgroup",{className:"mB-60"},s.default.createElement("h5",{className:"c-minor"},"Jun 17, 2017"),s.default.createElement("h1",{className:"c-blocker"},"ES6 Overview - Promises"),s.default.createElement("hr",null)),s.default.createElement(a.default,{escapeHtml:!1,source:i.default})))},l=c,m=l;r.default=m,function(){var r=n(1).default,t=n(1).leaveModule;r&&(r.register(c,"Es6OverviewPromises","E:\\personal-website\\src\\screens\\Blog\\components\\Es6OverviewPromises\\index.jsx"),r.register(l,"default","E:\\personal-website\\src\\screens\\Blog\\components\\Es6OverviewPromises\\index.jsx"),t(e))}()}).call(r,n(7)(e))},774:function(e,r){e.exports="### Promises\r\n\r\n##### Description\r\nPromise is the eventual result of async operation.\r\n\r\n\r\n##### Terms\r\n- **Resolver**: Function that defines `Promise` logic.\r\n- **Thenable**: Object with a `then` method, it may be a `Promise` object or user defined object.\r\n- **Pending**: `Promise` status when it doesn't achieve any result yet.\r\n- **Settlement**: `Promise` status when it achieves any result (success/fail).\r\n- **Fulfillment**: `Promise` has succeeded/resolved.\r\n- **Fail/Reject**: `Promise` is rejected/failed.\r\n\r\n<img src='https://i.stack.imgur.com/idOX8.png' alt='promises'>\r\n\r\n\r\n\r\n##### API\r\n\r\n###### `Constructor`\r\n``` javascript\r\n/**\r\n * Promise constructor consists of 3 simple parts as following:\r\n *\r\n * [1] : Async operation.\r\n * [2] : Success condition to resolve returned data from async operation.\r\n * [3] : Fail condition to reject the promise.\r\n */\r\n\r\nconst\r\n  promise = new Promise(( resolve, reject ) => {\r\n    // [1]\r\n    const\r\n      data = '';\r\n\r\n    // [2]\r\n    data && resolve( data );\r\n\r\n    // [3]\r\n    !data && reject( new Error('Error: Promise Rejected!') );\r\n  });\r\n```\r\n\r\n\r\n###### `then`\r\n``` javascript\r\n/**\r\n * @param {function} successHandler  receives `[[PromiseValue]]` property value as its argument if `[[PromiseStatus]]` is resolved.\r\n * @param {function} errorHandler    receives promise passed error as its argument if `[[PromiseStatus]]` is rejected.\r\n * @return Promise Object.\r\n */\r\n\r\npromise.then( successHandler, errorHandler );\r\n```\r\n\r\n\r\n###### `catch\r\n``` javascript\r\n/**\r\n * @param {function} errorHandler  receives promise passed error as its argument if `[[PromiseStatus]]` is rejected.\r\n * @return Promise Object.\r\n */\r\n\r\npromise.catch( errorHandler );\r\n```\r\n\r\n\r\n###### `all`\r\n``` javascript\r\n/**\r\n * @param {array} iterable  array of promises\r\n * @return Promise Object.\r\n */\r\n\r\nPromise.all( iterable )\r\n```\r\n\r\n\r\n###### `race`\r\n``` javascript\r\n/**\r\n * @param {array} iterable  array of promises\r\n * @return Promise Object.\r\n */\r\n\r\nPromise.race( iterable )\r\n```\r\n\r\n\r\n###### `resolve`\r\n``` javascript\r\n/**\r\n * @param {*} arg  value, promise, thenable.\r\n * @return Promise Object.\r\n */\r\n\r\nPromise.resolve( arg )\r\n```\r\n\r\n\r\n###### `reject`\r\n``` javascript\r\n/**\r\n * @param {*} arg  value passed when promise is rejected.\r\n * @return Promise Object.\r\n */\r\n\r\nPromise.reject( arg )\r\n```\r\n\r\n\r\n##### Notes\r\n- Inside `Promise` constructor body any error thrown is treated as the rejection value.\r\n- `then`: method used to register callback to receive fulfillment value and/or the reason why the promise is rejected.\r\n- For chainable `then`, each one `successHandler`'s argument equals to the previous `then` return value.\r\n- When a promise is rejected the first `catch` method fires its callback with the promise error as its argument.\r\n- `catch` method doesn't stop further code execution.\r\n- each `then` method throws its error to the next `catch` method in the chain.\r\n- `Promise.catch( errorHandler )` = `Promise.then( null, errorHandler )`.\r\n- \r\n- Whenever possible try to make promise rejection value as instance of `Error` for debugging purposes.\r\n- `Promise.all`: if only one promise in the collection is rejected then the return promise `[[PromiseStatus]]` will be `rejected`.\r\n- `Promise.race`: the first settled promise is the one who defines the returned promise `[[PromiseStatus]]` & `[[PromiseValue]]`.\r\n"}});