webpackJsonp([33],{774:function(e,n){e.exports="### Promises\n\n##### Description\nPromise is the eventual result of async operation.\n\n\n##### Terms\n- **Resolver**: Function that defines `Promise` logic.\n- **Thenable**: Object with a `then` method, it may be a `Promise` object or user defined object.\n- **Pending**: `Promise` status when it doesn't achieve any result yet.\n- **Settlement**: `Promise` status when it achieves any result (success/fail).\n- **Fulfillment**: `Promise` has succeeded/resolved.\n- **Fail/Reject**: `Promise` is rejected/failed.\n\n<img src='https://i.stack.imgur.com/idOX8.png' alt='promises'>\n\n\n\n##### API\n\n###### `Constructor`\n``` javascript\n/**\n * Promise constructor consists of 3 simple parts as following:\n *\n * [1] : Async operation.\n * [2] : Success condition to resolve returned data from async operation.\n * [3] : Fail condition to reject the promise.\n */\n\nconst\n  promise = new Promise(( resolve, reject ) => {\n    // [1]\n    const\n      data = '';\n\n    // [2]\n    data && resolve( data );\n\n    // [3]\n    !data && reject( new Error('Error: Promise Rejected!') );\n  });\n```\n\n\n###### `then`\n``` javascript\n/**\n * @param {function} successHandler  receives `[[PromiseValue]]` property value as its argument if `[[PromiseStatus]]` is resolved.\n * @param {function} errorHandler    receives promise passed error as its argument if `[[PromiseStatus]]` is rejected.\n * @return Promise Object.\n */\n\npromise.then( successHandler, errorHandler );\n```\n\n\n###### `catch\n``` javascript\n/**\n * @param {function} errorHandler  receives promise passed error as its argument if `[[PromiseStatus]]` is rejected.\n * @return Promise Object.\n */\n\npromise.catch( errorHandler );\n```\n\n\n###### `all`\n``` javascript\n/**\n * @param {array} iterable  array of promises\n * @return Promise Object.\n */\n\nPromise.all( iterable )\n```\n\n\n###### `race`\n``` javascript\n/**\n * @param {array} iterable  array of promises\n * @return Promise Object.\n */\n\nPromise.race( iterable )\n```\n\n\n###### `resolve`\n``` javascript\n/**\n * @param {*} arg  value, promise, thenable.\n * @return Promise Object.\n */\n\nPromise.resolve( arg )\n```\n\n\n###### `reject`\n``` javascript\n/**\n * @param {*} arg  value passed when promise is rejected.\n * @return Promise Object.\n */\n\nPromise.reject( arg )\n```\n\n\n##### Notes\n- Inside `Promise` constructor body any error thrown is treated as the rejection value.\n- `then`: method used to register callback to receive fulfillment value and/or the reason why the promise is rejected.\n- For chainable `then`, each one `successHandler`'s argument equals to the previous `then` return value.\n- When a promise is rejected the first `catch` method fires its callback with the promise error as its argument.\n- `catch` method doesn't stop further code execution.\n- each `then` method throws its error to the next `catch` method in the chain.\n- `Promise.catch( errorHandler )` = `Promise.then( null, errorHandler )`.\n- \n- Whenever possible try to make promise rejection value as instance of `Error` for debugging purposes.\n- `Promise.all`: if only one promise in the collection is rejected then the return promise `[[PromiseStatus]]` will be `rejected`.\n- `Promise.race`: the first settled promise is the one who defines the returned promise `[[PromiseStatus]]` & `[[PromiseValue]]`.\n"}});