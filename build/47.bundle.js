webpackJsonp([47],{760:function(n,e){n.exports="### Array Methods\n\n#### Methods List\n- Array.from\n- Array.of\n- Array.prototype.fill\n- Array.prototype.find\n- Array.prototype.findIndex\n- Array.prototype.entries\n- Array.prototype.keys\n- Array.prototype.copyWithin\n\n\n#### `Array.from`\n\n##### Description\nMethod used to create an array from array-like & iterable objects.\n\n\n##### Syntax\n```javascript\nArray.from( obj,\n            mapFunction ?= undefined,\n            context ?= enclosing context ) // => array of the provided input\n```\n\n\n##### Examples\n```javascript\nlet\n  arrLike  = { 0: 'zero', 1: 'one', length: 2 },\n  iterable = 'iterable',\n  fn = function () {\n    let args = Array.from( arguments );\n    console.log( args )\n  };\n\nArray.from( arrLike, (val, idx) => (val += ' in digits ' + idx)) // ['zero in digits 0', 'one in digits 1']\nArray.from( iterable )// ['i','t','e','r','a','b','l','e']\nfn(1, 2) // [1, 2]\n```\n\n\n\n#### `Array.of`\n\n##### Description\nMethod used to create an array from its passed arguments regardless of their type.\n\n\n##### Syntax\n```javascript\nArray.of(elm0[, elem1, ... elemN]) // => array of arguments\n```\n\n\n##### Examples\n```javascript\nArray.of(1, 'string', false, undefined, null, new Date(), {x: 0}, [1]) // [1, \"string\", false, undefined, null, \"3030-01-01:)\", {x:0}, [1]]\n```\n\n\n\n#### `Array.prototype.fill`\n\n##### Description\nMethod used to change array slots values to the passed value from a starting index to end index.\n\n\n##### Syntax\n```javascript\narr.fill( val,\n          start ?= 0,\n          end   ?= arr.length ) // => new filled array\n```\n\n\n##### Examples\n```javascript\n[1, 2, 3].fill(0)           // [0,0,0]\n[1, 2, 3].fill(0, 1)        // [1,0,0]\n[1, 2, 3].fill(0, 1, 2)     // [1,0,3]\n[1, 2, 3].fill(0, -1)       // [1,2,0]\n[1, 2, 3].fill(0, -1, -2)   // [1,2,3]\n[1, 2, 3].fill(0, -5, -10)  // [1,2,3]\n```\n\n\n\n#### `Array.prototype.find`\n\n##### Description\nMethod used to find an first element that passes a test function in a given array.\n\n\n##### Syntax\n```javascript\narr.find( testFN(element, index, arr),\n          context ?= undefined ) // => the first matched element value\n```\n\n\n##### Examples\n```javascript\nlet\n  arr = [1, 2, 3, 4],\n  testFN = (elem) => elem % 2 === 0;\n\n// find the first even numer in the array\narr.find(testFN); // 2\n```\n\n\n\n#### `Array.prototype.findIndex`\n\n##### Description\nMethod used to find an first element **index** that passes a test function in a given array.\n\n\n##### Syntax\n```javascript\narr.findIndex(testFN(element, index, arr),\n              context ?= undefined) // => the first matched element value\n```\n\n\n##### Examples\n```javascript\nlet\n  arr = [1, 2, 3, 4],\n  testFN = (elem) => elem % 2 === 0;\n\n// find the index of the first even numer in the array\narr.findIndex(testFN); // 1\n```\n\n\n\n#### `Array.prototype.entries`\n\n##### Description\nMethod used to create array iterator from key/value pairs of the provided array.\n\n\n##### Syntax\n```javascript\narr.entries() // => Array Iterator\n```\n\n\n##### Examples\n```javascript\nlet it = [1, 2, 3, 4].entries();\nit.next().value; // [0, 1]\nit.next().value; // [1, 2]\nit.next().value; // [2, 3]\nit.next().value; // [3, 4]\n```\n\n\n\n#### `Array.prototype.keys`\n\n##### Description\nMethod used to create array iterator from indexes of the provided array.\n\n\n##### Syntax\n```javascript\narr.keys() // => Array Iterator\n```\n\n\n##### Examples\n```javascript\nlet it = [1, 2, 3, 4].keys();\nit.next().value; // 0\nit.next().value; // 1\nit.next().value; // 2\nit.next().value; // 3\n```\n\n\n\n#### `Array.prototype.copyWithin`\n\n##### Description\nMethod used to copy array or array-like elements from one position to another inside the same array.\n\n\n##### Syntax\n```javascript\narr.copyWithin( targetIndex,\n                start ?= 0,\n                end ?= arr.length ) // => new formated array\n```\n\n\n##### Examples\n```javascript\nlet\n  arr = [1, 2, 3, 4, 5],\n  arrLike = { 0: 1, 1: 2, 2: 3, length: 3 }\n\narr.copyWithin(0, 3) // => [4, 5, 3, 4, 5]\n[].copyWithin.call(arrLike, 0, 2) // => { 0: 3, 1: 2, 2: 3, length: 3 }\n```\n"}});