webpackJsonp([39],{768:function(e,n){e.exports="### let, const and Block Scoping\r\n\r\n#### `let`\r\n\r\n##### Description\r\n\r\nUsed to create a global-scoped or block-scoped variable whose refrence **can** be re-assigned but it can't be re-declared in the same scope.\r\n\r\n\r\n\r\n##### Syntax\r\n\r\n```javascript\r\nlet identifier [= expression]; // Assignment is optional\r\n```\r\n\r\n\r\n\r\n\r\n##### Notes\r\n\r\n1. `let` creates global-scoped & block-scoped variable contrary to `var` that creates global-scoped & **function-scoped** only.\r\n2. `let` doesn't create properties on global object contrary to `var`.\r\n3. `let` allows only a single declaration for a sepecific identifier within the same scope. redeclaring the same variable created by `let` within the same scope throws an `SuntaxError`.\r\n4. `let` assignment (a.k.a: intialzation) is **optional** meaninig you can do this `let x;`.\r\n5. `let` gets hoisted but it can't be accessed within the **Temporal Dead Zone[1]** (a.k.a: **TDZ**) means you can't reference the identifier before or within the declaration statement or `RefrenceError` is thrown;\r\n\r\n- [1] **Temporal Dead Zone** : The period between scope starting position untill the declaration statement position.\r\n\r\n```javascript\r\n// [ Item 1 ]\r\nlet x = 0; // global-scoped\r\nfunction fn() {\r\n  let y = 1; // function-scoped also block-scoped\r\n  if ( y === 1 ) {\r\n    let z = 2; // block-scoped\r\n  }\r\n}\r\n\r\n\r\n// [ Item 2 ]\r\nlet x = 0;\r\nwindow.x; // undefined not 0\r\n\r\n\r\n// [ Item 3 ]\r\nlet x = 0;\r\nlet x = 1; // SyntaxError\r\n\r\nlet y = 1;\r\nif ( true ) {\r\n  let y = 2; // Totally valid\r\n}\r\n\r\n\r\n// [ Item 5 ]\r\nlet x = 0;\r\n\r\nlet fn = function () {\r\n  return x;\r\n  let x = 1; // Error below asserts that x is hoisted\r\n};\r\n\r\nfn() // RefrenceError\r\n```\r\n\r\n##### Practical Usage\r\n- Use `let` whereever you need to re-assign the same identifier to a different value, with loops for instance, otherwise use `const`.\r\n\r\n\r\n\r\n#### `const`\r\n\r\n\r\n##### Description\r\n\r\nThe same as `let` with some differences. It is used to create a global-scoped or block-scoped variable whose refrence **can't** be re-assigned and it can't be re-declared in the same scope.\r\n\r\n\r\n\r\n##### Syntax\r\n\r\n```javascript\r\nconst IDENTIFIER = expression; // Assignment is a must\r\n```\r\n\r\n\r\n\r\n\r\n##### Notes\r\n\r\n1. `const` creates global-scoped & block-scoped variable contrary to `var` that creates global-scoped & **function-scoped** only, same as `let`.\r\n2. `const` doesn't create properties on global object contrary to `var`, same as `let`.\r\n3. `const` allows only a single declaration for a sepecific identifier within the same scope. redeclaring the same variable created by `const` within the same scope throws a `SyntaxError`. re-assigment of the same identifier at any scope throws a `TypeError`.\r\n4. `const` allows you to delete/write/edit the assigned object.\r\n5. `const` assignment (a.k.a: intialzation) is **a must** meaninig you **can't** do this `const x;` contrary to `let`.\r\n6. `const` gets hoisted but it can't be accessed within the **Temporal Dead Zone** (a.k.a: **TDZ**) means you can't reference the identifier before or within the declaration statement or `RefrenceError` is thrown;\r\n\r\n- Common practice when using `const`: capitalize all identifier letters and in case multiple words identifier use `_` as separator.\r\n\r\n```javascript\r\n// [ Item 1 ]\r\nconst X = 0; // global-scoped\r\nfunction fn() {\r\n  const Y = 1; // function-scoped also block-scoped\r\n  if ( Y === 1 ) {\r\n    const Z = 2; // block-scoped\r\n  }\r\n}\r\n\r\n\r\n// [ Item 2 ]\r\nconst X = 0;\r\nwindow.X; // undefined not 0\r\n\r\n\r\n// [ Item 3 ]\r\nconst X = 0;\r\nconst X = 1; // SyntaxError\r\nX = 1; // TypeError: re-assigment is not allowed\r\n\r\nconst Y = 1;\r\nif ( true ) {\r\n  Y = 2; // TypeError: re-assigment is not allowed\r\n  const Y = 2; // Totally valid\r\n}\r\n\r\n\r\n// [ Item 4 ]\r\nconst ARR = [1, 2];\r\nARR.push(3);    // Valid: ARR = [1, 2, 3]\r\ndelete ARR[0];  // Valid: ARR = [undefined, 2, 3]\r\nARR[0] = 'ONE'; // Valid: ARR = ['ONE', 2, 3]\r\n\r\n\r\n// [ Item 6 ]\r\nconst X = 0;\r\n\r\nconst FN = function () {\r\n  return x;\r\n  const X = 1; // Error below asserts that x is hoisted\r\n};\r\n\r\nFN() // RefrenceError\r\n```\r\n\r\n##### Practical Usage\r\n- Use `const` whereever you don't need to re-assign the same identifier to a different value, otherwise use `let`.\r\n"}});