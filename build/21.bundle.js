webpackJsonp([21,45],{762:function(e,n){e.exports="### Classes\n\n#### Description\nSyntactic sugar for prototypal inheritance in JavaScript.\n\n\n#### `class`\nReserved keyword used to define a constructor class.\n\n##### Example\n\n``` javascript\nclass ClassName {\n  // ...\n}\n```\n\n##### Notes\n- `class` name binding inside its scope is `const` binding and `let` binding outside.\n- `class` can't be called directly as functions do (i.e. `ClassName()` throws).\n\n#### `constructor()`\nMethod used once inside a class to define properties and methods on it.\n\n##### Example\n\n``` javascript\nclass ClassName {\n  constructor() {\n    this.name = 'ClassName';\n  }\n}\n```\n\n##### Notes\n- `constructor` method can't be used with `static` keyword.\n- `constructor` method can only be used **once** inside class.\n- Methods defined outside `constructor` is set on the class prototype.\n\n\n#### `extends`\nReserved keyword used when deriving subclasses from a superclass.\n\n##### Example\n\n``` javascript\nclass Parent {\n  // ...\n}\n\nclass Child extends Parent {\n  // ...\n}\n```\n\n##### Notes\n- Methods defined on the super class are accessible by its subclasses.\n\n#### `super`\nReserved keyword used inside subclasses or object literals as a reference for their superclass, or their prototypes in case of object literals.\n\n##### Example\n\n``` javascript\nclass Parent {\n  constructor(kind) {\n    this.kind = kind\n  }\n}\n\nclass Child extends Parent {\n  constructor(childName, parentKind) {\n    super(parentKind);\n    this.name = childName;\n  }\n\n  sayName() {\n    console.log( 'My Name is ' + this.name + ' and I\\'m ' + this.kind );\n  }\n}\n\nlet baby = new Child('John', 'Human');\nbaby.sayName(); // My Name is John and I'm Human\n```\n\n``` javascript\nconst\n  Parent = {\n    kind: 'Human'\n  },\n\n  Child = {\n    name: 'John',\n    sayName() {\n      console.log( 'My Name is ' + this.name + ' and I\\'m ' + super.kind )\n    }\n  };\n\nObject.setPrototypeOf(Child, Parent);\nChild.sayName(); // My Name is John and I'm Human\n```\n\n##### Notes\n- You can't access superclass properties/methods before invoking `super()` method first inside subclass constructor.\n\n\n#### `static`\nReserved keyword used to define (static methods) methods accessible only by classes themselves not their instances.\n\n##### Example\n\n``` javascript\nclass Parent {\n  static sayName(name) {\n    console.log(name);\n  }\n}\n\nParent.sayName('Doe'); // Doe\n\nconst parentName = new Parent();\nparentName.sayName('Doe'); // TypeError\n```\n\n##### Notes\n- Static methods are reserved for their respective class and can't be accessed inside its instances.\n"},92:function(e,n,s){"use strict";(function(e){function a(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var t=a(s(2)),r=a(s(221)),o=a(s(57)),c=a(s(762));!function(){var n=s(1).enterModule;n&&n(e)}();var i=function(){return t.default.createElement(o.default,null,t.default.createElement("div",{id:"post"},t.default.createElement("hgroup",{className:"mB-60"},t.default.createElement("h5",{className:"c-minor"},"Jul 01, 2017"),t.default.createElement("h1",{className:"c-blocker"},"ES6 Overview - Classes"),t.default.createElement("hr",null)),t.default.createElement(r.default,{source:c.default})))},l=i,d=l;n.default=d,function(){var n=s(1).default,a=s(1).leaveModule;n&&(n.register(i,"Es6OverviewClasses","E:\\Dropbox\\Projects\\playgrounds\\boilerplate\\src\\screens\\Blog\\components\\Es6OverviewClasses\\index.jsx"),n.register(l,"default","E:\\Dropbox\\Projects\\playgrounds\\boilerplate\\src\\screens\\Blog\\components\\Es6OverviewClasses\\index.jsx"),a(e))}()}).call(n,s(7)(e))}});