webpackJsonp([36],{771:function(n,e){n.exports="### Number Methods\n\n#### Methods List\n- Number.isNaN\n- Number.isInteger\n- Number.isFinite\n- Number.parseInt\n- Number.parseFloat\n- Number.MAX_SAFE_INTEGER\n- Number.MIN_SAFE_INTEGER\n- Number.isSafeInteger\n- Number.EPSILON\n\n\n#### `Number.isNaN`\n\n##### Description\nChecks if a value is **NaN**.\n\n\n##### Syntax\n```javascript\nNumber.isNaN(value)\n```\n\n\n##### Examples\n```javascript\nNumber.isNaN(0/0) // => true\nNumber.isNaN(NaN) // => true\n\nNumber.isNaN(true)  // => false\nNumber.isNaN('NaN') // => false\n```\n\n\n#### `Number.isInteger`\n\n##### Description\nChecks if a value is **integer**.\n\n\n##### Syntax\n```javascript\nNumber.isInteger(value)\n```\n\n\n##### Examples\n```javascript\nNumber.isInteger(1)   // => true\nNumber.isInteger('1') // => true\n\nNumber.isInteger(1.1) // => false\n```\n\n\n#### `Number.isFinite`\n\n##### Description\nChecks if a value is finite number.\n\n\n##### Syntax\n```javascript\nNumber.isFinite(value)\n```\n\n\n##### Examples\n```javascript\nNumber.isFinite(1)          // => true\nNumber.isFinite(2e64)       // => true\n\nNumber.isFinite(Infinity)   // => false\nNumber.isFinite(NaN)        // => false\nNumber.isFinite(1/0)        // => false\n```\n\n\n#### `Number.parseInt`\n\n##### Description\nparses a value as **integer**.\n\n\n##### Syntax\n```javascript\nNumber.parseInt(value)\n```\n\n\n##### Examples\n```javascript\nNumber.parseInt(1.2)       // => 1\nNumber.parseInt('1.99')    // => 1\nNumber.parseInt(NaN)       // => NaN\nNumber.parseInt(Infinity)  // => NaN\n```\n\n\n#### `Number.parseFloat`\n\n##### Description\nparses a value as **floating point number**.\n\n\n##### Syntax\n```javascript\nNumber.parseFloat(value)\n```\n\n\n##### Examples\n```javascript\nNumber.parseFloat(1.1)      // => 1.1\nNumber.parseFloat('1.99')   // => 1.99\nNumber.parseFloat(NaN)      // => NaN\nNumber.parseFloat(Infinity) // => Infinity\n```\n\n\n\n#### `Number.MIN_SAFE_INTEGER`\n\n##### Description\nReturns the minimum safest interger.\n\n\n##### Syntax\n```javascript\nNumber.MIN_SAFE_INTEGER // => -(2 ** 53 - 1)\n```\n\n\n\n#### `Number.MAX_SAFE_INTEGER`\n\n##### Description\nReturns the maximum safest interger.\n\n\n##### Syntax\n```javascript\nNumber.MAX_SAFE_INTEGER // => 2 ** 53 - 1\n```\n\n\n#### `Number.isSafeInteger`\n\n##### Description\nChecks if a number is a safe integer meaning it falls between and including -(2 ** 53 - 1) & (2 ** 53 - 1).\n\n\n##### Syntax\n```javascript\nNumber.isSafeInteger(value)\n```\n\n\n\n#### `Number.EPSILON`\n\n##### Description\nReturns the smallest possible positive number.\n\n\n##### Syntax\n```javascript\nNumber.EPSILON // => 2 ** -52\n```\n"}});