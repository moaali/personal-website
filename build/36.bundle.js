webpackJsonp([36],{771:function(r,n){r.exports="### Number Methods\r\n\r\n#### Methods List\r\n- Number.isNaN\r\n- Number.isInteger\r\n- Number.isFinite\r\n- Number.parseInt\r\n- Number.parseFloat\r\n- Number.MAX_SAFE_INTEGER\r\n- Number.MIN_SAFE_INTEGER\r\n- Number.isSafeInteger\r\n- Number.EPSILON\r\n\r\n\r\n#### `Number.isNaN`\r\n\r\n##### Description\r\nChecks if a value is **NaN**.\r\n\r\n\r\n##### Syntax\r\n```javascript\r\nNumber.isNaN(value)\r\n```\r\n\r\n\r\n##### Examples\r\n```javascript\r\nNumber.isNaN(0/0) // => true\r\nNumber.isNaN(NaN) // => true\r\n\r\nNumber.isNaN(true)  // => false\r\nNumber.isNaN('NaN') // => false\r\n```\r\n\r\n\r\n#### `Number.isInteger`\r\n\r\n##### Description\r\nChecks if a value is **integer**.\r\n\r\n\r\n##### Syntax\r\n```javascript\r\nNumber.isInteger(value)\r\n```\r\n\r\n\r\n##### Examples\r\n```javascript\r\nNumber.isInteger(1)   // => true\r\nNumber.isInteger('1') // => true\r\n\r\nNumber.isInteger(1.1) // => false\r\n```\r\n\r\n\r\n#### `Number.isFinite`\r\n\r\n##### Description\r\nChecks if a value is finite number.\r\n\r\n\r\n##### Syntax\r\n```javascript\r\nNumber.isFinite(value)\r\n```\r\n\r\n\r\n##### Examples\r\n```javascript\r\nNumber.isFinite(1)          // => true\r\nNumber.isFinite(2e64)       // => true\r\n\r\nNumber.isFinite(Infinity)   // => false\r\nNumber.isFinite(NaN)        // => false\r\nNumber.isFinite(1/0)        // => false\r\n```\r\n\r\n\r\n#### `Number.parseInt`\r\n\r\n##### Description\r\nparses a value as **integer**.\r\n\r\n\r\n##### Syntax\r\n```javascript\r\nNumber.parseInt(value)\r\n```\r\n\r\n\r\n##### Examples\r\n```javascript\r\nNumber.parseInt(1.2)       // => 1\r\nNumber.parseInt('1.99')    // => 1\r\nNumber.parseInt(NaN)       // => NaN\r\nNumber.parseInt(Infinity)  // => NaN\r\n```\r\n\r\n\r\n#### `Number.parseFloat`\r\n\r\n##### Description\r\nparses a value as **floating point number**.\r\n\r\n\r\n##### Syntax\r\n```javascript\r\nNumber.parseFloat(value)\r\n```\r\n\r\n\r\n##### Examples\r\n```javascript\r\nNumber.parseFloat(1.1)      // => 1.1\r\nNumber.parseFloat('1.99')   // => 1.99\r\nNumber.parseFloat(NaN)      // => NaN\r\nNumber.parseFloat(Infinity) // => Infinity\r\n```\r\n\r\n\r\n\r\n#### `Number.MIN_SAFE_INTEGER`\r\n\r\n##### Description\r\nReturns the minimum safest interger.\r\n\r\n\r\n##### Syntax\r\n```javascript\r\nNumber.MIN_SAFE_INTEGER // => -(2 ** 53 - 1)\r\n```\r\n\r\n\r\n\r\n#### `Number.MAX_SAFE_INTEGER`\r\n\r\n##### Description\r\nReturns the maximum safest interger.\r\n\r\n\r\n##### Syntax\r\n```javascript\r\nNumber.MAX_SAFE_INTEGER // => 2 ** 53 - 1\r\n```\r\n\r\n\r\n#### `Number.isSafeInteger`\r\n\r\n##### Description\r\nChecks if a number is a safe integer meaning it falls between and including -(2 ** 53 - 1) & (2 ** 53 - 1).\r\n\r\n\r\n##### Syntax\r\n```javascript\r\nNumber.isSafeInteger(value)\r\n```\r\n\r\n\r\n\r\n#### `Number.EPSILON`\r\n\r\n##### Description\r\nReturns the smallest possible positive number.\r\n\r\n\r\n##### Syntax\r\n```javascript\r\nNumber.EPSILON // => 2 ** -52\r\n```\r\n"}});