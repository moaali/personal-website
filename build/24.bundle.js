webpackJsonp([24],{783:function(n,r){n.exports="### Template Literals\r\n\r\n#### Description\r\nSpecial type of string literals with the capability of holding embedded expressions and optionally parsed by custom function called tag function.\r\n\r\n\r\n#### Example\r\n```javascript\r\nlet string = `contents`;\r\n```\r\n\r\n\r\n\r\n#### Substitution Expressions (Placeholders)\r\nJavaScript expressions that can be parsed at runtime inside template literals and initiated by `${ expression }`.\r\n\r\n##### Example\r\n```javascript\r\nlet greeting = 'Hello';\r\nconsole.log( `${greeting} Developer!` );\r\n```\r\n\r\n\r\n\r\n#### Tagged Template Literals\r\nCustom function used to control parsing template literal.\r\n\r\n##### Syntax\r\n```javascript\r\nlet parseResult = TAG_FUNCTION_NAME`contents`;\r\n```\r\n\r\n##### Example\r\n```javascript\r\nconst\r\n  name = 'Neo',\r\n  HTMLEscaped = escape`<div>I'm ${name}</div>`\r\n\r\n/**\r\n * Custom function used to escape HTML angles\r\n *\r\n * @param  {array} strings\r\n *    Array of template literal string parts with `row` property containing\r\n *    array of the same values but without parsing backslash escape sequences.\r\n * @param  {array} subs\r\n *    Array containing all substitution expressions parsed values.\r\n * @return {string} the newly parsed template literal contents.\r\n */\r\nfunction escape( strings, ...subs ) {\r\n  const results = [];\r\n\r\n  strings = strings.map((string) => {\r\n    let escapedString = string.replace(/</i, '&lt;').replace(/>/i, '&gt;')\r\n    return escapedString;\r\n  });\r\n\r\n  for ( const i of strings ) {\r\n    results.push( i, subs[strings.indexOf(i)] || '' )\r\n  }\r\n\r\n  return results.join('');\r\n}\r\n\r\nconsole.log( HTMLEscaped ); // &lt;div&gt;I'm Neo&lt;/div&gt;\r\n```\r\n\r\n\r\n#### Raw String\r\nMethod used to access template literal string contents without parsing backslash escape sequences (i.e. the source code as you type it in the script  file).\r\n\r\n##### Example\r\n```javascript\r\nconsole.log(`My name is ${'NEO'}.\\n\\nand I've no choice`)\r\n// My name is NEO.\r\n//\r\n// and I've no choice\r\nconsole.log(String.raw`My name is ${'NEO'}.\\n\\nand I've no choice`)\r\n// My name is NEO.\\n\\nand I've no choice\r\n```\r\n"}});