webpackJsonp([28],{779:function(n,t){n.exports="### String Methods\n\n#### Methods List\n1. ##### **`String.fromCodePoint()`**\n2. ##### **`String.prototype.codePointAt()`**\n3. ##### **`String.prototype.startsWith(),`**\n4. ##### **`String.prototype.endsWith()`**\n5. ##### **`String.prototype.includes()`**\n6. ##### **`String.prototype.repeat()`**\n7. ##### **`String.prototype.normalize()`**\n8. ##### **`String.raw()`**\n\n##### **`String.fromCodePoint()`**\n\n###### Description\nReturns string from the provided unicode code points.\n\n###### Syntax\n```javascript\n/**\n * Returns string from the provided unicode code points.\n *\n * @param  {Number} num Reference to unicode point representing a string.\n * \n * @return {String}\n *\n * @exceptions\n *    + RangeError\n *        01. If non valid unicode code point is passed.\n */\nString.fromCodePoint(num1, ..., numN)\n```\n\n###### Examples\n```javascript\nString.fromCodePoint(65);   // => \"A\"\nString.fromCodePoint('_');  // => RangeError\n```\n\n\n\n##### **`String.prototype.codePointAt()`**\n\n###### Description\nReturns a non-negative integer represents Unicode code point for a string value in the specified position.\n\n###### Syntax\n```javascript\n/**\n * Returns a non-negative integer represents Unicode code point\n * for a string value in the specified position.\n *\n * @param  {Number} position Index of the input value to get its code point.\n *\n * @return {Number|undefined}\n *    `Number` represents Unicode code point if found `undefined` otherwise.\n */\nString.prototype.codePointAt(position)\n```\n\n###### Examples\n```javascript\n'AB'.codePointAt(1) // => 65\n'AB'.codePointAt(3) // => undefined\n```\n\n\n\n##### **`String.prototype.startsWith()`**\n\n###### Description\nDetermines if a string starts with the specified characters or not.\n\n###### Syntax\n```javascript\n/**\n * Determines if a string starts with the specified characters or not.\n *\n * @param  {String} string      Characters to match.\n * @param  {Number} [position]  Index to start matching from.\n *\n * @return {Boolean}\n *    true if there's a match, false otherwise.\n */\nString.prototype.startsWith(string, position)\n```\n\n###### Examples\n```javascript\n'ABC'.startsWith('A')    // => true\n'ABC'.startsWith('B')    // => false\n'BAC'.startsWith('A', 1) // => true\n```\n\n\n\n##### **`String.prototype.endsWith()`**\n\n###### Description\nDetermines if a string ends with the specified characters or not.\n\n###### Syntax\n```javascript\n/**\n * Determines if a string ends with the specified characters or not.\n *\n * @param  {String} string   Characters to match.\n * @param  {Number} [length] Range to search in.\n *\n * @return {Boolean}\n *    true if there's a match, false otherwise.\n */\nString.prototype.endsWith(string, length)\n```\n\n###### Examples\n```javascript\n'ABC'.endsWith('C')    // => true\n'ABC'.endsWith('B')    // => false\n'BAC'.endsWith('A', 2) // => true\n```\n\n\n\n##### **`String.prototype.includes()`**\n\n###### Description\nDetermines if a string is found in other string.\n\n###### Syntax\n```javascript\n/**\n * Determines if a string is found in other string.\n *\n * @param  {String} string     Characters to match.\n * @param  {Number} [position] Index to start searching from.\n *\n * @return {Boolean}\n *    true if there's a match, false otherwise.\n */\nString.prototype.includes(string, position)\n```\n\n###### Examples\n```javascript\n'ABC'.includes('C')    // => true\n'ABC'.includes('D')    // => false\n'BAC'.includes('A', 1) // => true\n```\n\n\n\n##### **`String.prototype.repeat()`**\n\n###### Description\nRepeats the string called on for the specified number of times.\n\n###### Syntax\n```javascript\n/**\n * Repeats the string called on for the specified number of times.g.\n *\n * @param  {Number} count Number of times to repeat\n *\n * @return {String}\n *    the new string containing the repeats.\n *\n * @exceptions\n *    + RangeError\n *        01. Negative count number\n *        02. Infinity\n *        03. Maximum string size\n */\nString.prototype.repeat(count)\n```\n\n###### Examples\n```javascript\n'ABC'.repeat(1)  // => 'ABCABC'\n'ABC'.repeat(-1) // => RangeError\n```\n\n\n\n##### **`String.prototype.normalize()`**\n\n###### Description\nMethod returns the Unicode Normalization Form of a given string.\n\n###### Syntax\n```javascript\n/**\n * Method returns the Unicode Normalization Form of a given string.\n *\n * @param  {String} [form = 'NFC']  Unicode Normalization Form.\n *\n * @return {String}\n *    Unicode Normalization Form of the given string.\n *\n * @exceptions\n *    + RangeError\n *        01. Provided form isn't supported\n */\nString.prototype.normalize(form)\n```\n\n###### Examples\n```javascript\nconst str = '\\u1E9B\\u0323';\nstr.normalize();      // '\\u1E9B\\u0323'\n```\n\n\n\n##### **`String.raw()`**\n\n###### Description\nMethod returns the non-parsed string of template literals.\n\n###### Syntax\n```javascript\n/**\n * Method returns the non-parsed string of template literals.\n *\n * @param  {Object} callSite  Object containing `raw` property.\n * @param  {Array}  subs      Placeholders values.\n *\n * @return {String}\n *    non-parsed string.\n *\n * @exceptions\n *    + TypeError\n *        01. callSite isn't `object` containing `raw` property.\n */\n String.raw(callSite, ...subs)\n String.raw`template literals`\n```\n\n###### Examples\n```javascript\nString.raw({ raw: 'hello\\n${x}' }, 'world'); // => \"hello\\\\nworld\"\nString.raw`'hello\\nworld`; // => \"hello\\\\nworld\"\n```\n"}});