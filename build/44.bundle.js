webpackJsonp([44],{763:function(e,r){e.exports="### Collections\r\n#### Map\r\n##### Description\r\nMap Objects = Objects + super powers :).\r\n\r\n##### Syntax\r\n```javascript\r\nnew Map([iterable])\r\n```\r\n##### Examples\r\n```javascript\r\n/**\r\n * [1] : Creating a map object using constructor args.\r\n * [2] : Creating a map object using `set` method.\r\n */\r\n\r\n// [1]\r\nconst\r\n  map1 = new Map([['first', 1], [{key: 'object as a key'}, 'object']]);\r\n\r\n// [2]\r\nconst\r\n  map2 = new Map();\r\n\r\nmap2.set('first', 1);\r\nmap2.set({key: 'object as a key'}, 'object');\r\n```\r\n##### API\r\n###### API List\r\n- **`Map.prototype.size`**: Determines number of map object members.\r\n- **`Map.prototype.set(key, value)`**: Registers a new member in a map object.\r\n- **`Map.prototype.get(key)`**: Retrieves a value of a map object member.\r\n- **`Map.prototype.delete(key)`**: Deletes a map object member.\r\n- **`Map.prototype.clear()`**: Empty map object.\r\n- **`Map.prototype.has(key)`**: Checks for member existence in a map object.\r\n- **`Map.prototype.entries()`**: Provides iterable object contaning all members key/value pairs in array format.\r\n- **`Map.prototype.keys()`**: Provides iterable object contaning all members keys in array format.\r\n- **`Map.prototype.values()`**: Provides iterable object contaning all members values in array format.\r\n- **`Map.prototype.forEach(callbackFn[, thisArg])`**: Loops throught each map object member and apply a callback function on it.\r\n\r\n###### API Examples\r\n```javascript\r\nvar\r\n  map = new Map([['first', 1], [{key: 'object as a key'}, 'object'], [3, [1, 2]]]);\r\n\r\nmap.size                            // => 3\r\nmap.get('first')                        // => 1\r\nmap.has('first')                        // => true\r\nmap.entries()                       // => [[Entries]] = [['first', 1], [{key: 'object as a key'}, 'object'], [3, [1, 2]]]\r\nmap.keys()                          // => [[Entries]] = ['first', {key: 'object as a key'}, 3]\r\nmap.values()                        // => [[Entries]] = [1, 'object', [1, 2]]\r\nmap.delete('first')                     // => returns `true` and map [[Entries]] = [[{key: 'object as a key'}, 'object'], [3, [1, 2]]]\r\nmap.clear()                         // => map now has no [[Entries]]\r\n\r\nconst\r\n  myMap = new Map();\r\n\r\nmyMap.set('first', 1);\r\nmyMap.set({key: 'object as a key'}, 'object');\r\n\r\nmyMap.forEach((val, key, obj) => {\r\n  console.log(`I'm ${obj} object, I have '${val}' as the value of ${key}`)\r\n})\r\n// I'm [object Map] object, I have '1' as the value of first\r\n// I'm [object Map] object, I have 'object' as the value of [object Object]\r\n```\r\n##### Notes\r\nSome of the powers of Map objects:\r\n- Map objects are iterable, it can be used with `for ... of` loop.\r\n- Map objects has dynamic `size` property to determine number of object members.\r\n- Map objects keys can be any type *primitive or compound*.\r\n- Map objects has direct check for member existence via `has` method.\r\n\r\n#### WeakMap\r\nWeakMap objects are the same as Map objects with the following exceptions:\r\n1. WeakMap object **keys must be objects**.\r\n2. WeakMap object members are *weakly refrenced* meaning if they haven't non refrences they will be garbage collected.\r\n\r\n#### Set\r\n##### Description\r\nIndexed data structure with unique values, same as arrays but without duplicates.\r\n\r\n##### Syntax\r\n```javascript\r\nnew Set([iterable])\r\n```\r\n\r\n##### Examples\r\n```javascript\r\nconst\r\n  set = new Set([1, 2, 3, 3, 3]);\r\n\r\nset // => [[Entries]] : [1, 2, 3]\r\n```\r\n\r\n##### API\r\n`Set` has the same API as `Map` Object above except that `set` method is replaced with `add` method to add members to the object, also it doesn't have a `get` method.\r\n\r\n###### API Examples\r\n```javascript\r\nconst\r\n  set = new Set([1, 2]);\r\n\r\nset.add(3) // => [[Entries]] : [1, 2, 3]\r\n\r\n// You can't directly access set content.\r\nconst\r\n  arr = [...set]\r\n\r\narr[0]\r\n```\r\n\r\n##### Notes\r\n- Think of Set behavior as arrays but without the duplications.\r\n- You can't directly access `set` content see above example for accesing `set` members.\r\n\r\n\r\n#### WeakSet\r\nWeakSet objects are the same as Set objects with the following exceptions:\r\n1. WeakSet object **values must be objects**.\r\n2. WeakSet object members are *weakly refrenced* meaning if they haven't non refrences they will be garbage collected.\r\n"}});